// Generated by gencpp from file cup_detect/mission_cameraRequest.msg
// DO NOT EDIT!


#ifndef CUP_DETECT_MESSAGE_MISSION_CAMERAREQUEST_H
#define CUP_DETECT_MESSAGE_MISSION_CAMERAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cup_detect
{
template <class ContainerAllocator>
struct mission_cameraRequest_
{
  typedef mission_cameraRequest_<ContainerAllocator> Type;

  mission_cameraRequest_()
    : coordinate_mission()
    , cup_color_mission(0)  {
    }
  mission_cameraRequest_(const ContainerAllocator& _alloc)
    : coordinate_mission(_alloc)
    , cup_color_mission(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _coordinate_mission_type;
  _coordinate_mission_type coordinate_mission;

   typedef int32_t _cup_color_mission_type;
  _cup_color_mission_type cup_color_mission;





  typedef boost::shared_ptr< ::cup_detect::mission_cameraRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cup_detect::mission_cameraRequest_<ContainerAllocator> const> ConstPtr;

}; // struct mission_cameraRequest_

typedef ::cup_detect::mission_cameraRequest_<std::allocator<void> > mission_cameraRequest;

typedef boost::shared_ptr< ::cup_detect::mission_cameraRequest > mission_cameraRequestPtr;
typedef boost::shared_ptr< ::cup_detect::mission_cameraRequest const> mission_cameraRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cup_detect::mission_cameraRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cup_detect::mission_cameraRequest_<ContainerAllocator1> & lhs, const ::cup_detect::mission_cameraRequest_<ContainerAllocator2> & rhs)
{
  return lhs.coordinate_mission == rhs.coordinate_mission &&
    lhs.cup_color_mission == rhs.cup_color_mission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cup_detect::mission_cameraRequest_<ContainerAllocator1> & lhs, const ::cup_detect::mission_cameraRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cup_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cup_detect::mission_cameraRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_detect::mission_cameraRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_detect::mission_cameraRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f244f5f66fa08f28785e512a4118b51";
  }

  static const char* value(const ::cup_detect::mission_cameraRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f244f5f66fa08f2ULL;
  static const uint64_t static_value2 = 0x8785e512a4118b51ULL;
};

template<class ContainerAllocator>
struct DataType< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cup_detect/mission_cameraRequest";
  }

  static const char* value(const ::cup_detect::mission_cameraRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] coordinate_mission\n"
"int32 cup_color_mission\n"
;
  }

  static const char* value(const ::cup_detect::mission_cameraRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coordinate_mission);
      stream.next(m.cup_color_mission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mission_cameraRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cup_detect::mission_cameraRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cup_detect::mission_cameraRequest_<ContainerAllocator>& v)
  {
    s << indent << "coordinate_mission[]" << std::endl;
    for (size_t i = 0; i < v.coordinate_mission.size(); ++i)
    {
      s << indent << "  coordinate_mission[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.coordinate_mission[i]);
    }
    s << indent << "cup_color_mission: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cup_color_mission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUP_DETECT_MESSAGE_MISSION_CAMERAREQUEST_H
