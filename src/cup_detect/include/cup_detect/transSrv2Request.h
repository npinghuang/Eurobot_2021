// Generated by gencpp from file cup_detect/transSrv2Request.msg
// DO NOT EDIT!


#ifndef CUP_DETECT_MESSAGE_TRANSSRV2REQUEST_H
#define CUP_DETECT_MESSAGE_TRANSSRV2REQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cup_detect
{
template <class ContainerAllocator>
struct transSrv2Request_
{
  typedef transSrv2Request_<ContainerAllocator> Type;

  transSrv2Request_()
    : camera_x(0)
    , camera_y(0)
    , reverse(false)  {
    }
  transSrv2Request_(const ContainerAllocator& _alloc)
    : camera_x(0)
    , camera_y(0)
    , reverse(false)  {
  (void)_alloc;
    }



   typedef int64_t _camera_x_type;
  _camera_x_type camera_x;

   typedef int64_t _camera_y_type;
  _camera_y_type camera_y;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;





  typedef boost::shared_ptr< ::cup_detect::transSrv2Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cup_detect::transSrv2Request_<ContainerAllocator> const> ConstPtr;

}; // struct transSrv2Request_

typedef ::cup_detect::transSrv2Request_<std::allocator<void> > transSrv2Request;

typedef boost::shared_ptr< ::cup_detect::transSrv2Request > transSrv2RequestPtr;
typedef boost::shared_ptr< ::cup_detect::transSrv2Request const> transSrv2RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cup_detect::transSrv2Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cup_detect::transSrv2Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cup_detect::transSrv2Request_<ContainerAllocator1> & lhs, const ::cup_detect::transSrv2Request_<ContainerAllocator2> & rhs)
{
  return lhs.camera_x == rhs.camera_x &&
    lhs.camera_y == rhs.camera_y &&
    lhs.reverse == rhs.reverse;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cup_detect::transSrv2Request_<ContainerAllocator1> & lhs, const ::cup_detect::transSrv2Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cup_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cup_detect::transSrv2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cup_detect::transSrv2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_detect::transSrv2Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cup_detect::transSrv2Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_detect::transSrv2Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cup_detect::transSrv2Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cup_detect::transSrv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dc05fe670d288b4497e7699b6ea7340";
  }

  static const char* value(const ::cup_detect::transSrv2Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dc05fe670d288b4ULL;
  static const uint64_t static_value2 = 0x497e7699b6ea7340ULL;
};

template<class ContainerAllocator>
struct DataType< ::cup_detect::transSrv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cup_detect/transSrv2Request";
  }

  static const char* value(const ::cup_detect::transSrv2Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cup_detect::transSrv2Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 camera_x\n"
"int64 camera_y\n"
"bool reverse\n"
;
  }

  static const char* value(const ::cup_detect::transSrv2Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cup_detect::transSrv2Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera_x);
      stream.next(m.camera_y);
      stream.next(m.reverse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct transSrv2Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cup_detect::transSrv2Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cup_detect::transSrv2Request_<ContainerAllocator>& v)
  {
    s << indent << "camera_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.camera_x);
    s << indent << "camera_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.camera_y);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUP_DETECT_MESSAGE_TRANSSRV2REQUEST_H
